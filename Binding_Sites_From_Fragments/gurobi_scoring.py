#!/usr/bin/env python3

import sqlite3
import subprocess
import os
import sys
import pandas as pd

class score_with_gurobi():
    """
    Class for determining best combinations of motif residues using Rosetta's feature reporter system
    """
    def __init__(self, user_defined_dir):
        self.user_defined_dir = user_defined_dir
        self.resources_dir = os.path.join(os.path.dirname(__file__), '..', 'Additional_Files')

    def complete_everything(self):
        pass

    def generate_feature_reptoer_db(self):
        """
        Generates a SQLITE3 database with all necessary two-bosy residue scores
        :return: 
        """
        # todo: update with config file paths and options...
        run_feature_reporter = subprocess.Popen(['/Users/jameslucas/Rosetta/main/source/bin/rosetta_scripts.macosclangrelease', # UPDATE
                                                 '-parser:protocol',
                                                 os.path.join(self.resources_dir, 'RosettaScripts', 'Two_body_residue_feature_reporter.xml'),
                                                 '-out:nooutput',
                                                 '-parser:script_vars',
                                                 'target={}'.format(self.user_defined_dir),
                                                 '-l',
                                                 './{}/Motifs/Residue_Ligand_Interactions/Single_Poses/single_pose_list.txt'.format(self.user_defined_dir),
                                                 '-extra_res_fa',
                                                 './{}/Inputs/Rosetta_Inputs/{}.params'.format(self.user_defined_dir, self.user_defined_dir)
                                                 ])
        run_feature_reporter.wait()

    def consolidate_scores(self):
        """
        Consolidates two-body terms into single score for two-body interactions
        Dumps these values into a new table in the source SQLITE3 database generated by the feature reporter
        :return: 
        """
        connection = sqlite3.connect('./{}/two_body_terms.db'.format(self.user_defined_dir))
        cursor = connection.cursor()

        table = pd.read_sql_query(
            """
            SELECT residue_scores_2b.struct_id, residue_scores_2b.resNum1, residue_scores_2b.resNum2, 
            score_types.score_type_name, residue_scores_2b.score_value from residue_scores_2b left join score_types on 
            residue_scores_2b.score_type_id == score_types.score_type_id where 
            (score_types.score_type_name = 'fa_atr' or 
            score_types.score_type_name = 'fa_rep' or 
            score_types.score_type_name = 'fa_elec' or
            score_types.score_type_name = 'hbond_sc' or
            score_types.score_type_name = 'hbond_bb_sc'
            )
            """, connection)

        print(table)