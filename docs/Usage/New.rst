*******************************
Start a New Project
*******************************

Create a Project Directory
==========================
Create a new directory for all of your BindingSitesFromFragments projects.::

    mkdir Compounds
    cd Compounds

To create a new project::

    bsff new <Compound_ID>

**<Compound_ID>** can be anything, but I suggest using a three-letter code e.g. MEH. Using a three-letter code is mostly
to keep things simple once you move to Rosetta for design.

``bsff new <Compound_ID>`` creates a new directory named *<Compound_ID>* within the *Compound* directory. This is where
BidingSitesFromFragments with keep PDBs and other things throughout the binding site design process. ::

    +-- Compounds
        +-- <Compound_ID>
            +-- Inputs
                +-- Fragment_Inputs
                |   +-- Fragment_Inputs.csv
                +-- Rosetta_Inputs
                +-- User_Inputs

We will be populating the directories under ``Compounds/<Compound_ID>/Inputs`` with the necessary information to start
designing binding sites for our target ligand.

Generating Inputs for BindingSitesFromFragments
===============================================

Preparing the Target Molecule
-----------------------------
Obtain a Sybyl .mol2 file representing your target molecule. There are many ways to do this, but I find the easiest ways
are to:

    1. Download an existing .mol2 file from LigandExpo/PDB
    2. Import a SMILES/SMARTS/InChi String into Avogadro and export as Sybyl .mol2

Generating Conformers
---------------------
If your target molecule contains rotatable bonds, it is highly recommended that you generate conformers so that
BindingSitesFromFragments can design around each conformer. It doesn't matter what method you use to generate conformers
as long as the output is a Sybyl .mol2 file.

Preparing Your Input .mol2 File
-------------------------------
Once you obtain a .mol2 for your target molecule (with or without conformers), we will use Rosetta's molfile_to_params.py
to standardize atom names and prepare .params files so that Rosetta will know how to handle your molecule. The
molefile_to_params.py script lives under ``path/to/Rosetta/main/source/scripts/python/public/molfile_to_params.py``.
The script ``molfile_split_into_singles.py`` found under ``Additional_Files/`` will use ``molfile_to_params.py`` to
generate .params and .pdb files for each conformer represented in your input .mol2 file. Each .pdb file will be named
``MEH_00XX.pdb`` where *MEH* is a three-letter code that you pass to ``molfile_split_into_singles.py`` and *XX* enumerates
each of the .pdb files. In addition, each .pdb file will have a corresponding .params file named ``MEH_00XX.params``.

Move all of the .params and .pdb files generated by ``molfile_split_into_singles.py`` to the ``Rosetta_Inputs/``
directory, so your project should now look like: ::

    +-- Compounds
    +-- <Compound_ID>
        +-- Inputs
            +-- Fragment_Inputs
            |   +-- Fragment_Inputs.csv
            +-- Rosetta_Inputs
            |   +-- * All conformer .pdb files *
            |   +-- * All conformer .param files *
            +-- User_Inputs

With your input molecule prepared, you can proceed to generating fragments for your target molecule.