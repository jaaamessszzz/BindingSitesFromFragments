#!/usr/bin/env python3

"""
Benchmark representation of unique side-chain contacts in the PDB for a fragment

"""

import os
import docopt
import pickle

import prody
import pandas as pd

def fragment_representation_bm(args):
    """
    Bootstrap AUC plot for unique side-chain fragment contact recovery for specific fragments

    Usage:
      bsff benchmark fragment_representation <user_defined_dir> <clusters_dir>

    Arguments:
      <user_defined_dir>      Path to project root directory
      <clusters_dir>          Path to directory containing clusters generated by clusters command

    :return:
    """

    """
    Before this function gets called:
      * Defined fragment (Use full amino acids to standardize atom names, need to figure out params for fragments)
      * Assemble fuzzball (SAVE REDUNDANT CONTACTS!!!)
    
    What happens here:
      * Assemble Cluster/PDB mapping dataframe from pProDy clusters
      * Remove singletons (keep track of this)
      * Find source of all structure codes in PDB
      * Bootstrap by taking 5% increments of PDB and intersect with dataframe
      * Save proportion of clusters recovered, plot
    
    Bam, done.
    
    All steps up to clustering to not rely on params files, so I might be able to get away with just generating fragments
    from ideal ligands from the PDB/LigandExpo.
    """

    user_defined_dir = args['<user_defined_dir>']
    clusters_dir = args['<clusters_dir>']

    # Import all PDBIDs from file
    pdb_entries_path = os.path.join(os.path.dirname(__file__), '..', '..', 'Additional_Files', 'entries.idx')
    pdb_df = pd.read_csv(pdb_entries_path,
                         delimiter='\t',
                         names=['IDCODE', 'HEADER', 'ACCESSION DATE', 'COMPOUND', 'SOURCE', 'AUTHOR LIST', 'RESOLUTION', 'EXPERIMENT TYPE'],
                         skiprows=2
                         )
    print(pdb_df)

    for cluster_dir in os.listdir(clusters_dir):

        with open(f'{cluster_dir}-PDB_Sources.pickle') as pdb_source_pickle:
            cluster_source_dict = pickle.load(pdb_source_pickle)

