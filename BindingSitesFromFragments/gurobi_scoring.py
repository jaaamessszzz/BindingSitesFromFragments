#!/usr/bin/env python3

import os
import sys
import pprint
import sqlite3
import itertools
import subprocess

import pandas as pd
from .utils import *
from .motifs import Generate_Motif_Residues
from gurobipy import *

import pyrosetta
from pyrosetta import rosetta

class score_with_gurobi():
    """
    Class for determining best combinations of motif residues using Rosetta's feature reporter system
    """
    def __init__(self, user_defined_dir, config_dict=None):
        self.user_defined_dir = user_defined_dir
        self.ligand_code = user_defined_dir[:3]
        self.resources_dir = os.path.join(os.path.dirname(__file__), '..', 'Additional_Files')
        self.user_config = config_dict

    def generate_feature_reporter_db(self):
        """
        Generates a SQLITE3 database with all necessary two-body residue scores
        :return: 
        """

        rosettascripts_path = os.path.join(self.user_config['Rosetta_path'], 'main/source/bin/rosetta_scripts.{}'.format(self.user_config['Rosetta_compiler']))

        run_feature_reporter = subprocess.Popen([rosettascripts_path, # UPDATE
                                                 '-parser:protocol',
                                                 os.path.join(self.resources_dir, 'RosettaScripts', 'Two_body_residue_feature_reporter.xml'),
                                                 '-out:nooutput',
                                                 '-parser:script_vars',
                                                 'target={}'.format(self.user_defined_dir),
                                                 '-l',
                                                 './{}/Motifs/Residue_Ligand_Interactions/Single_Poses/fuzzball_list.txt'.format(self.user_defined_dir),
                                                 '-extra_res_fa',
                                                 './{}/Inputs/Rosetta_Inputs/Scoring_params/{}.params'.format(self.user_defined_dir, self.ligand_code)
                                                 ])
        run_feature_reporter.wait()

    def consolidate_scores_better(self):
        """
        Consolidates two-body terms into single score for two-body interactions
        Dumps these values into a new table in the source SQLITE3 database generated by the feature reporter
        
        The new plan:
        create sqlite table with [fa_atr, fa_elec, hbond_sc, hbond_bb_sc] from residue_scores_2b
        create sqlite table with [fa_rep] * 0.55 from residue_scores_2b
        merge tables with create new table sum(score_value) group by (batch_id, struct_id, resNum1, resNum2)
        :return: 
        """
        connection = sqlite3.connect('./{}/two_body_terms.db'.format(self.user_defined_dir))
        cursor = connection.cursor()

        # Generate new table with residue-index mappings from .csv
        df = pd.read_csv(os.path.join(f'{self.user_defined_dir}', 'motif_residue_attributes.csv'), index_col=0)
        df.to_sql('residue_index_mapping', con=connection, if_exists='replace')

        cursor.execute(
            """CREATE TABLE relevant_2b_scores AS
            SELECT residue_scores_2b.batch_id, residue_scores_2b.struct_id, residue_scores_2b.resNum1,
            residue_scores_2b.resNum2, score_types.score_type_name, residue_scores_2b.score_value from residue_scores_2b
            left join score_types on residue_scores_2b.score_type_id == score_types.score_type_id where 
            (
            (score_types.score_type_name = 'fa_atr' or
            score_types.score_type_name = 'fa_rep' or
            score_types.score_type_name = 'fa_sol' or
            score_types.score_type_name = 'fa_elec' or
            score_types.score_type_name = 'hbond_sc' or
            score_types.score_type_name = 'hbond_bb_sc')
            and
            residue_scores_2b.resNum1 = 1
            )
            UNION 
            SELECT residue_scores_2b.batch_id, residue_scores_2b.struct_id, residue_scores_2b.resNum1,
            residue_scores_2b.resNum2, score_types.score_type_name, residue_scores_2b.score_value from residue_scores_2b
            left join score_types on residue_scores_2b.score_type_id == score_types.score_type_id where 
            (
            (score_types.score_type_name = 'fa_atr' or
            score_types.score_type_name = 'fa_rep' or
            score_types.score_type_name = 'fa_sol' or
            score_types.score_type_name = 'fa_elec' or
            score_types.score_type_name = 'hbond_sc')
            and
            residue_scores_2b.resNum1 != 1
            )
            """
        )

            # Old query...

            # """CREATE TABLE relevant_2b_scores AS
            # SELECT residue_scores_2b.batch_id, residue_scores_2b.struct_id, residue_scores_2b.resNum1,
            # residue_scores_2b.resNum2, score_types.score_type_name, residue_scores_2b.score_value from residue_scores_2b
            # left join score_types on residue_scores_2b.score_type_id == score_types.score_type_id where
            # (score_types.score_type_name = 'fa_atr' or
            # score_types.score_type_name = 'fa_elec' or
            # score_types.score_type_name = 'hbond_sc' or
            # score_types.score_type_name = 'hbond_bb_sc')
            # UNION
            # SELECT residue_scores_2b.batch_id, residue_scores_2b.struct_id, residue_scores_2b.resNum1,
            # residue_scores_2b.resNum2, score_types.score_type_name, (residue_scores_2b.score_value * 1.00) from residue_scores_2b
            # left join score_types on residue_scores_2b.score_type_id == score_types.score_type_id where
            # (score_types.score_type_name = 'fa_rep')
            # """

        # Free up space
        cursor.execute("DROP TABLE IF EXISTS batch_reports")
        cursor.execute("DROP TABLE IF EXISTS features_reporters")
        cursor.execute("DROP TABLE IF EXISTS residue_scores_lr_2b")
        cursor.execute("DROP TABLE IF EXISTS residue_scores_2b")
        cursor.execute("DROP TABLE IF EXISTS residue_scores_1b")
        cursor.execute("DROP TABLE IF EXISTS residues")
        cursor.execute("DROP TABLE IF EXISTS score_types")
        cursor.execute("DROP TABLE IF EXISTS sampled_structures")
        cursor.execute("DROP TABLE IF EXISTS structures")
        cursor.execute("DROP TABLE IF EXISTS batches")
        cursor.execute("DROP TABLE IF EXISTS protocols")