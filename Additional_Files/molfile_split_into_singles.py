"""
Takes a conformer .mol2 file generated by OMEGA and splits it up into individual .mol2 files
This is necessary (at the moment?) to generate individual Rosetta params files necessary for matching. Adding the 
PDB_Rotamers line to an existing params file for the target ligand forces the matcher to consider all ligand conformers
available to it, meaning things take ~1 hour instead of ~1 minute (ERG, 58 conformers).

Usage:
molfile_split_into_singles <input_mol> <compound_id>

Arguements:
    <input_mol>
        path to the input sybyl mol2 file containing your conformer library
        
    <compound_id>
        Three letter compound ID
"""
import sys
import os
import docopt
import subprocess
import shutil
import re
from BindingSitesFromFragments.utils import pdb_check

def molfile_split_into_singles(input_mol_path, compound_id):
    input_mol_string = open(input_mol_path, 'r')

    conformer_count = 0
    line_dump = []

    # touch
    open('{}_singletons.txt'.format(compound_id), 'w').close()

    for line in input_mol_string:

        if line == '@<TRIPOS>MOLECULE\n' and conformer_count != 0:
            file_name = '{}_{:0>4}.mol2'.format(compound_id, conformer_count)
            print('*** Generating {} ***'.format(file_name))
            dump_to_file(file_name, line_dump, compound_id)

            # Reset things
            line_dump = []

        if line == '@<TRIPOS>MOLECULE\n':
            conformer_count += 1

        line_dump.append(line)

    # Dump last .mol2 file (hacky~)
    file_name = '{}_{:0>4}.mol2'.format(compound_id, conformer_count)
    print('*** Generating {} ***'.format(file_name))
    dump_to_file(file_name, line_dump, compound_id)

def dump_to_file(file_name, list_of_lines, compound_id):
    with open(file_name, 'w') as singleton_mol:
        for line in list_of_lines:
            singleton_mol.write(line)

    # Generate a list to pass into mol_to_params for ease
    with open('{}_singletons.txt'.format(compound_id), 'a') as asdf:
        asdf.write(file_name + '\n')

def generate_params_files(compound_id):
    """
    Call Rosetta's mol_to_params.py to generate param files for all singleton .mol2 conformer files
    :return: 
    """

    mol_list = open('{}_singletons.txt'.format(compound_id), 'r')
    for mol in mol_list:
        current_mol = mol.strip()
        # todo: configure Rosetta path to user settings in config file
        run_mol_to_params = subprocess.run(['/Users/jameslucas/Rosetta/main/source/scripts/python/public/molfile_to_params.py',
                                            current_mol,
                                            '-n',
                                            current_mol.split('_')[0],
                                            '-p',
                                            current_mol.split('.')[0],
                                            ])

    # Strip "_0001" suffix from pdbs generated by mol_to_params
    moltoparams_pdbs = os.listdir(os.getcwd())
    for pdb in moltoparams_pdbs:
        if pdb.endswith('.pdb'):
            print(pdb)
            pdb_split = pdb.split('_')
            pdb_new_name = "{}_{}.pdb".format(pdb_split[0], pdb_split[1])
            os.rename(pdb, pdb_new_name)

def main():
    args = docopt.docopt(__doc__)

    molfile_split_into_singles(args['<input_mol>'], args['<compound_id>'])
    generate_params_files(args['<compound_id>'])

    # Generate conformer library for scoring later
    run_mol_to_params = subprocess.run( ['/Users/jameslucas/Rosetta/main/source/scripts/python/public/molfile_to_params.py',
                                         args['<input_mol>'],
                                         '-n',
                                         args['<compound_id>'],
                                         '-p',
                                         args['<compound_id>'],
                                         '--conformers-in-one-file'
                                         ])

    # Move "standard" .param files and conformer library to its own directory
    os.makedirs('Scoring_params', exist_ok=True)

    shutil.copy2('{}.params'.format(args['<compound_id>']), os.path.join('Scoring_params', '{}.params'.format(args['<compound_id>'])))
    shutil.copy2('{}.pdb'.format(args['<compound_id>']), os.path.join('Scoring_params', '{}.pdb'.format(args['<compound_id>'])))
    shutil.copy2('{}_conformers.pdb'.format(args['<compound_id>']), os.path.join('Scoring_params', '{}_conformers.pdb'.format(args['<compound_id>'])))

if __name__ == '__main__':
    main()